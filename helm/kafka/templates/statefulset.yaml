apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}-controller
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "kafka.fullname" . }}-controller-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      containers:
      - name: kafka
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: kafka
          containerPort: 9092
          protocol: TCP
        - name: controller
          containerPort: 29093
          protocol: TCP
        env:
        - name: KAFKA_BROKER_ID
          value: "{{ .Values.kafka.brokerId }}"
        - name: KAFKA_NODE_ID
          value: "{{ .Values.kafka.nodeId }}"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://{{ include "kafka.fullname" . }}-controller-0.{{ include "kafka.fullname" . }}-controller-headless.{{ .Release.Namespace }}.svc.cluster.local:9092"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "{{ .Values.kafka.nodeId }}@{{ include "kafka.fullname" . }}-controller-0.{{ include "kafka.fullname" . }}-controller-headless.{{ .Release.Namespace }}.svc.cluster.local:29093"
        - name: KAFKA_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "{{ .Values.kafka.offsetsTopicReplicationFactor }}"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "{{ .Values.kafka.transactionStateLogMinIsr }}"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "{{ .Values.kafka.transactionStateLogReplicationFactor }}"
        - name: KAFKA_LOG_DIRS
          value: "/var/lib/kafka/data/logs"
        - name: CLUSTER_ID
          value: "{{ .Values.kafka.clusterId }}"
        volumeMounts:
        - name: data
          mountPath: /var/lib/kafka/data
          subPath: kafka-data
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
