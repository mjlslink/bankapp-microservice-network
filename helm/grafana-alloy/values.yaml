# Official Grafana Alloy chart configuration for local development
alloy:
  # Alloy runs as a DaemonSet to collect logs from all nodes
  alloy:
    # Clustering disabled for simplicity in local dev
    clustering:
      enabled: false

    # Configuration for Alloy
    configMap:
      create: true
      content: |-
        // Discover Kubernetes pods and collect their logs
        discovery.kubernetes "pods" {
          role = "pod"
        }

        // Relabel to add useful metadata
        discovery.relabel "pods" {
          targets = discovery.kubernetes.pods.targets

          // Add namespace
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            target_label  = "namespace"
          }

          // Add pod name
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            target_label  = "pod"
          }

          // Add container name
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            target_label  = "container"
          }

          // Add app label if exists
          rule {
            source_labels = ["__meta_kubernetes_pod_label_app"]
            target_label  = "app"
          }

          // Set the log path
          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            target_label  = "__path__"
            separator     = "/"
            replacement   = "/var/log/pods/*$1/*.log"
          }
        }

        // Scrape logs from discovered pods
        loki.source.kubernetes "pods" {
          targets    = discovery.relabel.pods.output
          forward_to = [loki.process.pods.receiver]
        }

        // Process logs - extract trace IDs if present
        loki.process "pods" {
          forward_to = [loki.write.default.receiver]

          // Parse JSON logs
          stage.json {
            expressions = {
              level     = "level",
              timestamp = "timestamp",
              message   = "message",
              trace_id  = "trace_id",
            }
          }

          // Extract trace ID to label for linking with Tempo
          stage.labels {
            values = {
              level = "",
              trace_id = "",
            }
          }
        }

        // Write logs to Loki
        loki.write "default" {
          endpoint {
            url = "http://loki-gateway.default.svc.cluster.local/loki/api/v1/push"
          }
        }

    # Resources - reduced for GKE compatibility
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 200m
        memory: 128Mi

    # Mount host paths to read container logs
    mounts:
      varlog: true
      dockercontainers: true

  # Controller settings
  controller:
    type: "daemonset"
    # Tolerations for GKE nodes
    tolerations:
      - effect: NoSchedule
        operator: Exists
    # Node affinity - allow scheduling on all nodes
    nodeSelector: {}
    affinity: {}

  # Service account
  serviceAccount:
    create: true

  # RBAC
  rbac:
    create: true
